1. Eccezione in una Classe Astratta
   In questo esempio, una classe astratta impone che le sue sottoclassi gestiscano una certa eccezione.

   
   abstract class Device {
       public abstract void start() throws Exception;
   }

   class Computer extends Device {
       public void start() throws Exception {
           throw new Exception("Failed to start computer");
       }
   }

   public class Test {
       public static void main(String[] args) {
           try {
               Device device = new Computer();
               device.start();
           } catch (Exception e) {
               System.out.println(e.getMessage());
           }
       }
   }
   

2. Eccezione in un'Interfaccia
   In questo esempio, un'interfaccia dichiara un metodo che può lanciare un'eccezione, e la classe che implementa l'interfaccia deve gestirla.

   
   interface Network {
       void connect() throws Exception;
   }

   class WiFiNetwork implements Network {
       public void connect() throws Exception {
           throw new Exception("Failed to connect to WiFi");
       }
   }

   public class Test {
       public static void main(String[] args) {
           try {
               Network network = new WiFiNetwork();
               network.connect();
           } catch (Exception e) {
               System.out.println(e.getMessage());
           }
       }
   }
   


Scenario: Un sistema di gestione di dispositivi che può connettersi a una rete. La connessione può fallire per vari motivi, quindi utilizzeremo eccezioni per gestirlo.

1. Interfaccia Network
   
   interface Network {
       void connect() throws NetworkException;
   }

   class NetworkException extends Exception {
       public NetworkException(String message) {
           super(message);
       }
   }
   

2. Classe Astratta Device
   
   abstract class Device {
       public abstract void start() throws DeviceException;
   }

   class DeviceException extends Exception {
       public DeviceException(String message) {
           super(message);
       }
   }
   

3. Implementazione con Eccezioni
   
   class WiFiNetwork implements Network {
       public void connect() throws NetworkException {
           // Simula un problema di connessione
           throw new NetworkException("Failed to connect to WiFi");
       }
   }

   class Computer extends Device {
       Network network;

       public Computer(Network network) {
           this.network = network;
       }

       public void start() throws DeviceException {
           try {
               network.connect();
               System.out.println("Device started and connected to network.");
           } catch (NetworkException e) {
               throw new DeviceException("Device failed to start due to network issues: " + e.getMessage());
           }
       }
   }
   ```

4. Test del Sistema
   
   public class TestSystem {
       public static void main(String[] args) {
           Network network = new WiFiNetwork();
           Device device = new Computer(network);

           try {
               device.start();
           } catch (DeviceException e) {
               System.out.println(e.getMessage());
           }
       }
   }
 

In questo esempio, `Network` è un'interfaccia che dichiara un metodo `connect()` che può lanciare `NetworkException`. La classe astratta `Device` dichiara un metodo `start()` che può lanciare `DeviceException`. La classe `Computer` estende `Device` e implementa la logica per avviare il dispositivo e connettersi alla rete. Se la connessione di rete fallisce, viene catturata l'eccezione `NetworkException` e viene lanciata una nuova `DeviceException` per segnalare che il dispositivo non è riuscito ad avviarsi a causa di problemi di rete. Nel `main`, gestiamo `DeviceException` con un blocco `try-catch`.



1. Catch Sequenziali
In questo esempio, gestiamo due tipi comuni di eccezioni: `ArithmeticException` e `NullPointerException`.


try {
    int a = 0;
    int result = 10 / a; // Potrebbe generare ArithmeticException
    String text = null;
    int length = text.length(); // Potrebbe generare NullPointerException
} catch (ArithmeticException e) {
    System.err.println("Cannot divide by zero: " + e.getMessage());
} catch (NullPointerException e) {
    System.err.println("Null object reference: " + e.getMessage());
}


2. Catch Multi-Eccezione
Gestiamo sia `ArithmeticException` che `NullPointerException` nello stesso blocco catch.


try {
    int a = 0;
    int result = 10 / a; // Potrebbe generare ArithmeticException
    String text = null;
    int length = text.length(); // Potrebbe generare NullPointerException
} catch (ArithmeticException | NullPointerException e) {
    System.err.println("Error occurred: " + e.getMessage());
}


3. Polimorfismo Applicato alle Eccezioni
Utilizziamo eccezioni personalizzate per dimostrare il polimorfismo.


class MyException extends Exception {}
class MyArithmeticException extends MyException {}
class MyNullException extends MyException {}

try {
    performCalculation();
    performNullCheck();
} catch (MyException e) {
    if (e instanceof MyArithmeticException) {
        System.err.println("Arithmetic error: " + e.getMessage());
    } else if (e instanceof MyNullException) {
        System.err.println("Null reference error: " + e.getMessage());
    }
}

private void performCalculation() throws MyArithmeticException {
    // Potrebbe generare MyArithmeticException
}

private void performNullCheck() throws MyNullException {
    // Potrebbe generare MyNullException
}


Try-Catch Annidati
Un esempio con gestione di eccezioni annidate, utilizzando `ArithmeticException` e `NumberFormatException`.


try {
    String input = "1234a";
    int number = Integer.parseInt(input); // Potrebbe generare NumberFormatException

    try {
        int result = 10 / number; // Potrebbe generare ArithmeticException
    } catch (ArithmeticException e) {
        System.err.println("Arithmetic error: " + e.getMessage());
    }

} catch (NumberFormatException e) {
    System.err.println("Number format error: " + e.getMessage());
}


Questi esempi utilizzano eccezioni comuni in Java e dimostrano i vari concetti di gestione delle eccezioni in un contesto più basilare, evitando l'uso di file e stream.